// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using ContactApp.Core.Entities;
using ContactApp.Core.Repository.SQLite;
using ContactApp.iOS.DataSources;

namespace ContactApp.iOS
{
	public partial class ContactDetailVC : UIViewController
	{
        public Contact Contact { get; set; }

        public bool ExistContact { get; set; } = false;

        public ContactDetailVC (IntPtr handle) : base (handle)
		{         
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            txtContactFullNameUI.Text   = Contact?.FullName;
            txtContactPhoneUI.Text      = Contact?.Phone;

            Console.WriteLine($"Contact Exist: {ExistContact}");
            btnSaveContactUI.TouchUpInside += UpsertContactHandler;
            btnDeleteContactUI.TouchUpInside += DeleteContactHandler;
        }

        private void CloseModalHandler( object sender, EventArgs e )
        {
            GoBackNavigation();
        }

        private void UpsertContactHandler( object sender, EventArgs e)
        {
            try
            {
                int affected;

                if (ExistContact == true)
                {
                    Contact.FullName    = txtContactFullNameUI.Text;
                    Contact.Phone       = txtContactPhoneUI.Text;

                    affected = Connection.Instance.Update( Contact );
                }
                else
                {
                    affected = Connection.Instance.Insert(new Contact
                    {
                        FullName = txtContactFullNameUI.Text,
                        Phone = txtContactPhoneUI.Text
                    });
                }
                   

                Console.WriteLine($"Row affected: {affected}");

                /*var alertVC = UIAlertController.Create("Success","Contact saved correctly!",UIAlertControllerStyle.Alert);
                alertVC.DismissModalViewController(true);
                PresentViewController(alertVC,true, null);*/

                GoBackNavigation();
            }
            catch ( SQLite.SQLiteException sqlEx )
            {
            }
            catch( Exception ex )
            {

            }
        }

        private void GoBackNavigation()
        {
            //-> Close modal navigation
            //DismissModalViewController(true);

            //-> Close stack navigation
            NavigationController.PopViewController(true);
        }

        private void DeleteContactHandler(object sender, EventArgs e)
        {
            try
            {
                if (ExistContact == true)
                {
                   int affected =  Connection.Instance.Delete(Contact);

                    Console.WriteLine($"Row affected: {affected}");
                }
            }
            catch (SQLite.SQLiteException sqlEx)
            {
                Console.WriteLine( sqlEx.Message );
            }

            GoBackNavigation();
        }
    }
}
